// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// Author: rentless (https://sketchfab.com/rentless)
// License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
// Source: https://sketchfab.com/3d-models/coconut-drink-2ee04e40790c416a8c4d8f598e5b57a7
// Title: Coconut Drink
// */

// import React, { useRef, useEffect } from 'react'
// import { useGLTF } from '@react-three/drei'
// import { useFrame, useThree } from '@react-three/fiber'
// import { a } from '@react-spring/three'; //animation enabled


// import CocoScene from '../assets/coconut_drink.glb';

// const Coco = (props) => {

//     const islandRef = useRef();
//   const { nodes, materials } = useGLTF(CocoScene);
//   return (
//     <a.group ref = {islandRef} {...props} >
//       <group position={[0, 1.007, 0]} scale={[1, 0.739, 1]}>
//         <mesh
//           castShadow
//           receiveShadow
//           geometry={nodes.Object_4.geometry}
//           material={materials.coco}
//         />
//         <mesh
//           castShadow
//           receiveShadow
//           geometry={nodes.Object_5.geometry}
//           material={materials.straw}
//         />
//       </group>
//     </a.group>
//   )
// }

// export default Coco;


/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: rentless (https://sketchfab.com/rentless)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/coconut-drink-2ee04e40790c416a8c4d8f598e5b57a7
Title: Coconut Drink
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import { a } from '@react-spring/three'; //animation enabled


import CocoScene from '../assets/coconut_drink.glb';

const Coco = ( {isRotating,
    setIsRotating,
    setCurrentStage,
    currentFocusPoint,
    ...props}) => {
        const islandRef = useRef();
    const { gl, viewport } = useThree();
    const { nodes, materials } = useGLTF(CocoScene);

      // Use a ref for the last mouse x position
  const lastX = useRef(0);
  // Use a ref for rotation speed
  const rotationSpeed = useRef(0);
  // Define a damping factor to control rotation damping
  const dampingFactor = 0.95;

    // Handle pointer (mouse or touch) down event
    const handlePointerDown = (event) => {
        event.stopPropagation();
        event.preventDefault();
        setIsRotating(true);

        // Calculate the clientX based on whether it's a touch event or a mouse event
        const clientX = event.touches ? event.touches[0].clientX : event.clientX;

        // Store the current clientX position for reference
        lastX.current = clientX;
    };
 // Handle pointer (mouse or touch) up event
 const handlePointerUp = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(false);
};

 // Handle pointer (mouse or touch) move event
const handlePointerMove = (event) => {
event.stopPropagation();
event.preventDefault();
if (isRotating) {
  // If rotation is enabled, calculate the change in clientX position
  const clientX = event.touches ? event.touches[0].clientX : event.clientX;

  // calculate the change in the horizontal position of the mouse cursor or touch input,
  // relative to the viewport's width
  const delta = (clientX - lastX.current) / viewport.width;

  // Update the island's rotation based on the mouse/touch movement
  islandRef.current.rotation.y += delta * 0.01 * Math.PI;

  // Update the reference for the last clientX position
  lastX.current = clientX;

  // Update the rotation speed
  rotationSpeed.current = delta * 0.02 * Math.PI;
}
};


  // Handle keydown events
  const handleKeyDown = (event) => {
    if (event.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y += 0.005 * Math.PI;
      rotationSpeed.current = 0.007;
    } else if (event.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y -= 0.005 * Math.PI;
      rotationSpeed.current = -0.007;
    }
  };

  // Handle keyup events
  const handleKeyUp = (event) => {
    if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  // Touch events for mobile devices
  const handleTouchStart = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);
  
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  }
  
  const handleTouchEnd = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  }
  
  const handleTouchMove = (e) => {
    e.stopPropagation();
    e.preventDefault();
  
    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const delta = (clientX - lastX.current) / viewport.width;
  
      islandRef.current.rotation.y += delta * 0.01 * Math.PI;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  }

  useEffect(() => {
    // Add event listeners for pointer and keyboard events
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);
    canvas.addEventListener("touchstart", handleTouchStart);
    canvas.addEventListener("touchend", handleTouchEnd);
    canvas.addEventListener("touchmove", handleTouchMove);

    // Remove event listeners when component unmounts
    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
      canvas.removeEventListener("touchstart", handleTouchStart);
      canvas.removeEventListener("touchend", handleTouchEnd);
      canvas.removeEventListener("touchmove", handleTouchMove);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  useFrame(() => {
    // If not rotating, apply damping to slow down the rotation (smoothly)
    if (!isRotating) {
      // Apply damping factor
      rotationSpeed.current *= dampingFactor;

      // Stop rotation when speed is very small
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      islandRef.current.rotation.y += rotationSpeed.current;
    } else {
      // When rotating, determine the current stage based on island's orientation
      const rotation = islandRef.current.rotation.y;
      const normalizedRotation =
      ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

    // Set the current stage based on the island's orientation
    switch (true) {
      case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
        setCurrentStage(4);
        break;
      case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
        setCurrentStage(3);
        break;
      case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
        setCurrentStage(2);
        break;
      case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
        setCurrentStage(1);
        break;
      default:
        setCurrentStage(null);
    }
  }
});
  return (
    <a.group ref = {islandRef} {...props} >
      <group position={[0, 1.007, 0]} scale={[1, 0.739, 1]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_4.geometry}
          material={materials.coco}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_5.geometry}
          material={materials.straw}
        />
      </group>
    </a.group>
  )
}

export default Coco;
